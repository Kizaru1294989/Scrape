{
    "nombre de vues": "0",
    "type": [
        "pythonmacosvisual-studio-code"
    ],
    "Pseudo": "desert_dweller",
    "github_score_time": [
        "edited 18 mins agojaynorton",
        "        asked 18 mins agojaynortonjaynorton111 bronze badge",
        "        answered 14 mins agoscotscotmccscotscotmcc2,23411 gold badge44 silver badges2424 bronze badges"
    ],
    "href": "/questions/74788788/importing-python-modules-in-vscode",
    "contenus": [
        "Recently downloaded vscode on macOS, but I seem unable to import any python modules. I've made sure I'm using a python3 interpreter but can't find the problem. For example:import numpy as npreturnsModuleNotFoundError: No module named 'numpy'and similarly for any other modules:import matplotlib.pyplot as pltModuleNotFoundError: No module named 'matplotlib'I have downloaded homebrew although I don't understand what it is (I'm a physicist not a programmer) and so far spent a few hours trying to figure it out. Any help would be great.",
        "Those two modules are third-part modules that need to be downloaded. The easiest/most common way to download is to use pip, which is a python module that should have come with your python install.From the command line, run a python3 -m pip install numpy matplotlib. That will call python using the module pip, with the pip command 'install numpy maplotlib' (you can call them one-at-a-time if you like).Once they are installed, you should be able to import them as you attempted above."
    ],
    "titre": "Importing python modules in vscode",
    "number": "1/50"
}{
    "nombre de vues": "0",
    "type": [
        "javascriptreactjsredux"
    ],
    "Pseudo": "hanoka",
    "github_score_time": [
        "edited 11 mins agoEssa Mohammad",
        "        asked 18 mins agoEssa MohammadEssa Mohammad111 bronze badge"
    ],
    "href": "/questions/74788787/i-am-not-able-to-set-the-value-of-property-after-using-filter-method",
    "contenus": [
        "  const eventSeatSelectCallback = (           SeatPrice,    FlightNumber,    SegmentKey      ) => {    var postObject = { ...state.post };      postObject.IsSeatSelected = true;      postObject.AirPassengerList.filter(          (x) =>              x.FlightNumber == FlightNumber.toString() &&              x.SegmentKey.toString() == SegmentKey.toString() &&              x.IsSelected == true      )[0].SeatPrice = SeatPrice;`    dispatch({ type: UPDATE_SEATFORPASSENGER, payLoad: postObject });  };The line above is giving error in the console asUncaught TypeError: Cannot set properties of undefined (setting 'SeatPrice')I am trying to set the value of AirPassengerList.SeatPrice to SeatPriceI want to to set the value of Object AirPassengerList.SeatPrice to the value of paramter SeatPrice"
    ],
    "titre": "I am not able to set the value of property after using filter method",
    "number": "2/50"
}{
    "nombre de vues": "7",
    "type": [
        "bisonyacc"
    ],
    "Pseudo": "jaynorton",
    "github_score_time": [
        "edited 10 mins agoJuyeon",
        "        asked 19 mins agoJuyeonJuyeon1344 bronze badges"
    ],
    "href": "/questions/74788784/syntax-error-in-yacc-building-cminus-parser",
    "contenus": [
        "I am building cminus parser for my school assignment.But It only can parse variable declaration, and does not parse anything (like function declaration, example below).cminus.y...%token IF ELSE WHILE%token INT VOID RETURN%token ID NUM%token ASSIGN EQ NE LT LE GT GE PLUS MINUS TIMES OVER LPAREN RPAREN LBRACE RBRACE LCURLY RCURLY COMMA SEMI%token ERROR ENDFILE%% /* Grammar for CMINUS */program     : decl_list             { savedTree = $1;}        ;decl_list   : decl_list decl            {              YYSTYPE t = $1;              if (t!=NULL){                while (t->sibling!=NULL) {t = t->sibling;}                t->sibling = $2;                $$ = $1;            }              else{ $$ = $2;}            }        | decl {$$=$1;}        ;decl        : var_decl  {$$ = $1;}        | func_decl {$$ = $1;}        ;saveID      : ID            { savedName = copyString(tokenString);              savedLineNo = lineno;}        ;saveNum    : NUM            { savedNumber = atoi(tokenString);              savedLineNo = lineno;}         ;var_decl    : type saveID SEMI            { $$ = newDeclNode(VarDecK);              $$->attr.name = savedName;              $$->lineno = lineno;              $$->type = Integer;              $$->child[0] = $1;             }        | type saveID LBRACE saveNum RBRACE SEMI            { $$ = newDeclNode(ArrDecK);              $$->attr.arr.name = savedName;              $$->attr.arr.size = savedNumber;              $$->lineno = lineno;              $$->child[0] = $1;            }        ;type        : INT            { $$=newExpNode(TypeK);              $$->type = Integer; }        | VOID            { $$=newExpNode(TypeK);              $$->type = Void; }        ;func_decl    : type saveID            { $$ = newDeclNode(FuncDecK);              $$->attr.name = savedName;              $$->lineno = lineno;            }            LPAREN params RPAREN comp_stmt            { $$ = $3;              $$->child[0]=$1;              $$->child[1]=$5;              $$->child[2]=$7;             }            ;...t.cvoid main(int arg){        a=a+1;}resultCMINUS COMPILATION:: t.c    line number     token           lexeme    ===================================================    1               VOID            void    1               ID              main    1               (               (    Syntax error at line 1: syntax error    Current token: (                (I expect t.c parsed in this order:program->decl->func_decl->type saveID LPAREN params RPAREN comp_stmtBut it always shows syntax error when matching left parenthesis.I guess I may wrote my grammer in wrong order, but I cannot figure out how to fix it."
    ],
    "titre": "Syntax error in yacc building cminus parser",
    "number": "3/50"
}{
    "nombre de vues": "0",
    "type": [
        "pythonregexstring"
    ],
    "Pseudo": "Essa Mohammad",
    "github_score_time": [
        "edited Nov 30, 2011 at 20:23user",
        "        asked Nov 27, 2011 at 20:55useruser7,00377 gold badges4646 silver badges9090 bronze badges",
        "edited May 23, 2017 at 11:54CommunityBot111 silver badge",
        "        answered Nov 27, 2011 at 20:59Sven MarnachSven Marnach552k114114 gold badges922922 silver badges822822 bronze badges",
        "edited May 23, 2017 at 12:02CommunityBot111 silver badge",
        "        answered Nov 27, 2011 at 21:18ninjageckoninjagecko86.1k2424 gold badges135135 silver badges144144 bronze badges",
        "edited Nov 28, 2011 at 20:57",
        "        answered Nov 27, 2011 at 21:27tobiguetobigue3,53733 gold badges2525 silver badges2828 bronze badges",
        "        answered Nov 27, 2011 at 21:27Has QUIT--Anony-MousseHas QUIT--Anony-Mousse74.8k1212 gold badges136136 silver badges191191 bronze badges"
    ],
    "href": "/questions/74788782/is-there-algorithm-to-identify-one-element-is-a-substring-of-other-element-in-a",
    "contenus": [
        "I have two sets of strings (A and B), and I want to know all pairs of strings a in A and b in B where a is a substring of b.The first step of coding this was the following:for a in A:    for b in B:        if a in b:            print (a,b)However, I wanted to know-- is there a more efficient way to do this with regular expressions (e.g. instead of checking if a in b:, check if the regexp '.*' + a + '.*': matches 'b'. I thought that maybe using something like this would let me cache the Knuth-Morris-Pratt failure function for all a. Also, using a list comprehension for the inner for b in B: loop will likely give a pretty big speedup (and a nested list comprehension may be even better).I'm not very interested in making a giant leap in the asymptotic runtime of the algorithm (e.g. using a suffix tree or anything else complex and clever). I'm more concerned with the constant (I just need to do this for several pairs of A and B sets, and I don't want it to run all week).Do you know any tricks or have any generic advice to do this more quickly? Thanks a lot for any insight you can share!Edit:Using the advice of @ninjagecko and @Sven Marnach, I built a quick prefix table of 10-mers:    import collections    prefix_table = collections.defaultdict(set)    for k, b in enumerate(B):        for i in xrange(len(prot_seq)-10):            j = i+10+1            prefix_table[b[i:j]].add(k)    for a in A:        if len(a) >= 10:            for k in prefix_table[a[:10]]:                # check if a is in b                # (missing_edges is necessary, but not sufficient)                if a in B[k]:                    print (a,b)        else:            for k in xrange(len(prots_and_seqs)):                # a is too small to use the table; check if                # a is in any b                if a in B[k]:                    print (a, b)",
        "Of course you can easily write this as a list comprehension:[(a, b) for a in A for b in B if a in b]This might slightly speed up the loop, but don't expect too much.  I doubt using regular expressions will help in any way with this one.Edit: Here are some timings:import itertoolsimport timeitimport reimport collectionswith open(/usr/share/dict/british-english) as f:    A = [s.strip() for s in itertools.islice(f, 28000, 30000)]    B = [s.strip() for s in itertools.islice(f, 23000, 25000)]def f():    result = []    for a in A:        for b in B:            if a in b:                result.append((a, b))    return resultdef g():    return [(a, b) for a in A for b in B if a in b]def h():    res = [re.compile(re.escape(a)) for a in A]    return [(a, b) for a in res for b in B if a.search(b)]def ninjagecko():    d = collections.defaultdict(set)    for k, b in enumerate(B):        for i, j in itertools.combinations(range(len(b) + 1), 2):            d[b[i:j]].add(k)    return [(a, B[k]) for a in A for k in d[a]]print Nested loop, timeit.repeat(f, number=1)print List comprehension, timeit.repeat(g, number=1)print Regular expressions, timeit.repeat(h, number=1)print ninjagecko, timeit.repeat(ninjagecko, number=1)Results:Nested loop [0.3641810417175293, 0.36279606819152832, 0.36295199394226074]List comprehension [0.362030029296875, 0.36148500442504883, 0.36158299446105957]Regular expressions [1.6498990058898926, 1.6494300365447998, 1.6480278968811035]ninjagecko [0.06402897834777832, 0.063711881637573242, 0.06389307975769043]Edit 2: Added a variant of the alogrithm suggested by ninjagecko to the timings.   You can see it is much better than all the brute force approaches.Edit 3: Used sets instead of lists to eliminate the duplicates. (I did not update the timings -- they remained essentially unchanged.)",
        "Let's assume your words are bounded at a reasonable size (let's say 10 letters). Do the following to achieve linear(!) time complexity, that is, O(A+B):Initialize a hashtable or trieFor each string b in B:For every substring of that stringAdd the substring to the hashtable/trie (this is no worse than 55*O(B)=O(B)), with metadata of which string it belonged toFor each string a in A:Do an O(1) query to your hashtable/trie to find all B-strings it is in, yield those(As of writing this answer, no response yet if OP's words are bounded. If they are unbounded, this solution still applies, but there is a dependency of O(maxwordsize^2), though actually it's nicer in practice since not all words are the same size, so it might be as nice as O(averagewordsize^2) with the right distribution. For example if all the words were of size 20, the problem size would grow by a factor of 4 more than if they were of size 10. But if sufficiently few words were increased from size 10->20, then the complexity wouldn't change much.)edit: https://stackoverflow.com/q/8289199/711085 is actually a theoretically better answer. I was looking at the linked Wikipedia page before that answer was posted, and was thinking linear in the string size is not what you want, and only later realized it's exactly what you want. Your intuition to build a regexp (Aword1|Aword2|Aword3|...) is correct since the finite-automaton which is generated behind the scenes will perform matching quickly IF it supports simultaneous overlapping matches, which not all regexp engines might. Ultimately what you should use depends on if you plan to reuse the As or Bs, or if this is just a one-time thing. The above technique is much easier to implement but only works if your words are bounded (and introduces a DoS vulnerability if you don't reject words above a certain size limit), but may be what you are looking for if you don't want the Aho-Corasick string matching finite automaton or similar, or it is unavailable as a library.",
        "A very fast way to search for a lot of strings is to make use of a finite automaton (so you were not that far with the guess of regexp), namely the Aho Corasick string matching machine, which is used in tools like grep, virus scanners and the like.First it compiles the strings you want to search for (in your case the words in A) into a finite-state automaton with failure function (see the paper from '75 if you are interested in details). This automaton then reads the input string(s) and outputs all found search strings (probably you want to modify it a bit, so that it outputs the string in which the search string was found aswell).This method has the advantage that it searches all search strings at the same time and thus needs to look at every character of the input string(s) only once (linear complexity)!There are implementations of the aho corasick pattern matcher at pypi, but i haven't tested them, so I can't say anything about performance, usability or correctness of these implementations.EDIT: I tried this implementation of the Aho-Corasick automaton and it is indeed the fastest of the suggested methods so far, and also easy to use:import pyahocorasickdef aho(A, B):    t = pyahocorasick.Trie();    for a in A:        t.add_word(a, a)    t.make_automaton()    return [(s,b) for b in B for (i,res) in t.iter(b) for s in res]One thing I observed though, was when testing this implementation with @SvenMarnachs script it yielded slightly less results than the other methods and I am not sure why. I wrote a mail to the creator, maybe he will figure it out.",
        "There are specialized index structures for this, see for example  http://en.wikipedia.org/wiki/Suffix_treeYou'd build a suffix-tree or something similar for B, then use A to query it."
    ],
    "titre": "Is there algorithm to identify one element is a substring of other element in a list? [duplicate]",
    "number": "4/50"
}